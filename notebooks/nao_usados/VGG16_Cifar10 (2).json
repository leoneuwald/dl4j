{"paragraphs":[{"text":"%spark.dep\nz.reset()\nz.load(\"org.nd4j:nd4j-native-platform:1.0.0-beta4\")\nz.load(\"org.deeplearning4j:deeplearning4j-core:1.0.0-beta4\")\nz.load(\"org.datavec:datavec-spark_2.11:1.0.0-beta4_spark_2\")\nz.load(\"org.deeplearning4j:dl4j-spark_2.11:1.0.0-beta4_spark_2\")\nz.load(\"org.deeplearning4j:deeplearning4j-zoo:1.0.0-beta4\")\nz.load(\"org.nd4j:nd4j-parameter-server:1.0.0-beta4\")\nz.load(\"org.deeplearning4j:dl4j-spark-parameterserver_2.11:1.0.0-beta4_spark_2\")","user":"anonymous","dateUpdated":"2019-09-01T19:04:36+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@27f64b2f\n"}]},"apps":[],"jobName":"paragraph_1567362495233_1206165074","id":"20190813-010616_2021083357","dateCreated":"2019-09-01T18:28:15+0000","dateStarted":"2019-09-01T19:04:36+0000","dateFinished":"2019-09-01T19:04:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16193"},{"text":"import com.beust.jcommander.Parameter;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.JavaSparkContext;\nimport org.datavec.api.io.labels.ParentPathLabelGenerator;\nimport org.datavec.api.io.labels.PathLabelGenerator;\nimport org.datavec.image.recordreader.ImageRecordReader;\nimport org.deeplearning4j.api.loader.impl.RecordReaderFileBatchLoader;\nimport org.deeplearning4j.datasets.fetchers.TinyImageNetFetcher;\nimport org.deeplearning4j.datasets.iterator.impl.TinyImageNetDataSetIterator;\nimport org.deeplearning4j.eval.Evaluation;\nimport org.deeplearning4j.nn.conf.ComputationGraphConfiguration;\nimport org.deeplearning4j.nn.conf.ConvolutionMode;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.layers.ConvolutionLayer;\nimport org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer;\nimport org.deeplearning4j.nn.conf.layers.LossLayer;\nimport org.deeplearning4j.nn.conf.layers.PoolingType;\nimport org.deeplearning4j.nn.graph.ComputationGraph;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.deeplearning4j.optimize.listeners.PerformanceListener;\nimport org.deeplearning4j.optimize.solvers.accumulation.encoding.threshold.AdaptiveThresholdAlgorithm;\nimport org.deeplearning4j.spark.api.TrainingMaster;\nimport org.deeplearning4j.spark.impl.graph.SparkComputationGraph;\nimport org.deeplearning4j.spark.parameterserver.training.SharedTrainingMaster;\nimport org.deeplearning4j.spark.util.SparkUtils;\nimport org.deeplearning4j.util.ModelSerializer;\nimport org.deeplearning4j.zoo.model.helper.DarknetHelper;\nimport org.nd4j.linalg.activations.Activation;\nimport org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler;\nimport org.nd4j.linalg.learning.config.AMSGrad;\nimport org.nd4j.linalg.lossfunctions.LossFunctions;\nimport org.nd4j.linalg.schedule.ISchedule;\nimport org.nd4j.linalg.schedule.MapSchedule;\nimport org.nd4j.linalg.schedule.ScheduleType;\nimport org.nd4j.parameterserver.distributed.conf.VoidConfiguration;\nimport org.nd4j.parameterserver.distributed.v2.enums.MeshBuildMode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedOutputStream;","user":"anonymous","dateUpdated":"2019-09-01T19:04:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.beust.jcommander.Parameter\nimport org.apache.commons.io.FilenameUtils\nimport org.apache.hadoop.fs.FileSystem\nimport org.apache.hadoop.fs.Path\nimport org.apache.spark.SparkConf\nimport org.apache.spark.api.java.JavaRDD\nimport org.apache.spark.api.java.JavaSparkContext\nimport org.datavec.api.io.labels.ParentPathLabelGenerator\nimport org.datavec.api.io.labels.PathLabelGenerator\nimport org.datavec.image.recordreader.ImageRecordReader\nimport org.deeplearning4j.api.loader.impl.RecordReaderFileBatchLoader\nimport org.deeplearning4j.datasets.fetchers.TinyImageNetFetcher\nimport org.deeplearning4j.datasets.iterator.impl.TinyImageNetDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.nn.conf.ComputationGraphConfiguration\nimport org.deeplearning4j.nn.conf.ConvolutionMode\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.layers.ConvolutionLayer\nimport org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer\nimport org.deeplearning4j.nn.conf.layers.LossLayer\nimport org.deeplearning4j.nn.conf.layers.PoolingType\nimport org.deeplearning4j.nn.graph.ComputationGraph\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.optimize.listeners.PerformanceListener\nimport org.deeplearning4j.optimize.solvers.accumulation.encoding.threshold.AdaptiveThresholdAlgorithm\nimport org.deeplearning4j.spark.api.TrainingMaster\nimport org.deeplearning4j.spark.impl.graph.SparkComputationGraph\nimport org.deeplearning4j.spark.parameterserver.training.SharedTrainingMaster\nimport org.deeplearning4j.spark.util.SparkUtils\nimport org.deeplearning4j.util.ModelSerializer\nimport org.deeplearning4j.zoo.model.helper.DarknetHelper\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.dataset.api.preprocessor.ImagePreProcessingScaler\nimport org.nd4j.linalg.learning.config.AMSGrad\nimport org.nd4j.linalg.lossfunctions.LossFunctions\nimport org.nd4j.linalg.schedule.ISchedule\nimport org.nd4j.linalg.schedule.MapSchedule\nimport org.nd4j.linalg.schedule.ScheduleType\nimport org.nd4j.parameterserver.distributed.conf.VoidConfiguration\nimport org.nd4j.parameterserver.distributed.v2.enums.MeshBuildMode\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport java.io.BufferedOutputStream\n"}]},"apps":[],"jobName":"paragraph_1567362495240_1117303583","id":"20190813-010626_1430679682","dateCreated":"2019-09-01T18:28:15+0000","dateStarted":"2019-09-01T19:04:53+0000","dateFinished":"2019-09-01T19:05:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16194"},{"text":"val networkMask = \"10.0.0.0/8\"\nval masterIP = \"10.128.0.25\"\n\n\nval numEpochs = 10\nval minibatch = 32\nval numWorkersPerNode = 1\nval gradientThreshold = 1E-3\nval port = 40123\n\nval voidConfiguration = VoidConfiguration.builder().unicastPort(port).networkMask(networkMask).controllerAddress(masterIP).meshBuildMode(MeshBuildMode.PLAIN).build()","user":"anonymous","dateUpdated":"2019-09-01T19:12:00+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"networkMask: String = 10.0.0.0/8\nmasterIP: String = 10.128.0.25\nnumEpochs: Int = 10\nminibatch: Int = 32\nnumWorkersPerNode: Int = 1\ngradientThreshold: Double = 0.001\nport: Int = 40123\nvoidConfiguration: org.nd4j.parameterserver.distributed.conf.VoidConfiguration = VoidConfiguration(streamId=-1, unicastControllerPort=49876, multicastPort=59876, numberOfShards=1, faultToleranceStrategy=NONE, executionMode=SHARDED, shardAddresses=[], backupAddresses=[], transportType=ROUTED_UDP, meshBuildMode=PLAIN, networkMask=10.0.0.0/8, multicastNetwork=224.0.1.1, multicastInterface=null, ttl=4, forcedRole=null, useHS=false, useNS=false, retransmitTimeout=1000, responseTimeframe=500, responseTimeout=30000, chunksBufferSize=1073741824, maxChunkSize=65536, maxFailuresPerNode=3, controllerAddress=10.128.0.25, portSupplier=StaticPortSupplier(port=49876))\n"}]},"apps":[],"jobName":"paragraph_1567362495240_820635664","id":"20190828-044726_487790819","dateCreated":"2019-09-01T18:28:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16195","dateFinished":"2019-09-01T19:12:01+0000","dateStarted":"2019-09-01T19:12:00+0000"},{"text":"val tm = new SharedTrainingMaster.Builder(voidConfiguration, minibatch).\nrngSeed(12345).\ncollectTrainingStats(false).\nbatchSizePerWorker(minibatch).\nthresholdAlgorithm(new AdaptiveThresholdAlgorithm(gradientThreshold)).\nworkersPerNode(numWorkersPerNode).\nbuild()","user":"anonymous","dateUpdated":"2019-09-01T19:14:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tm: org.deeplearning4j.spark.parameterserver.training.SharedTrainingMaster = SharedTrainingMaster(trainingHooks=null, voidConfiguration=VoidConfiguration(streamId=-1, unicastControllerPort=49876, multicastPort=59876, numberOfShards=1, faultToleranceStrategy=NONE, executionMode=MANAGED, shardAddresses=[], backupAddresses=[], transportType=ROUTED_UDP, meshBuildMode=PLAIN, networkMask=10.0.0.0/8, multicastNetwork=224.0.1.1, multicastInterface=null, ttl=4, forcedRole=null, useHS=false, useNS=false, retransmitTimeout=1000, responseTimeframe=500, responseTimeout=30000, chunksBufferSize=1073741824, maxChunkSize=65536, maxFailuresPerNode=3, controllerAddress=10.128.0.25, portSupplier=StaticPortSupplier(port=49876)), numWorkers=null, numWorkersPerNode=1, workerPrefetchBatches=2, rddTrainingAppro..."}]},"apps":[],"jobName":"paragraph_1567362495241_1628462449","id":"20190828-053243_1540319826","dateCreated":"2019-09-01T18:28:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16196","dateFinished":"2019-09-01T19:14:15+0000","dateStarted":"2019-09-01T19:14:15+0000"},{"text":"def getNetwork():ComputationGraph = {\n        val lrSchedule = new MapSchedule.Builder(ScheduleType.EPOCH)\n            .add(0, 8e-3)\n            .add(1, 6e-3)\n            .add(3, 3e-3)\n            .add(5, 1e-3)\n            .add(7, 5e-4).build()\n\n        val b = new NeuralNetConfiguration.Builder()\n            .convolutionMode(ConvolutionMode.Same)\n            .l2(1e-4)\n            .updater(new AMSGrad(lrSchedule))\n            .weightInit(WeightInit.RELU)\n            .graphBuilder()\n            .addInputs(\"input\")\n            .setOutputs(\"output\")\n\n        DarknetHelper.addLayers(b, 0, 3, 3, 32, 0)     //64x64 out\n        DarknetHelper.addLayers(b, 1, 3, 32, 64, 2)    //32x32 out\n        DarknetHelper.addLayers(b, 2, 2, 64, 128, 0)   //32x32 out\n        DarknetHelper.addLayers(b, 3, 2, 128, 256, 2)   //16x16 out\n        DarknetHelper.addLayers(b, 4, 2, 256, 256, 0)   //16x16 out\n        DarknetHelper.addLayers(b, 5, 2, 256, 512, 2)   //8x8 out\n\n        b.addLayer(\"convolution2d_6\", new ConvolutionLayer.Builder(1, 1)\n            .nIn(512)\n            .nOut(TinyImageNetFetcher.NUM_LABELS)\n            .weightInit(WeightInit.XAVIER)\n            .stride(1, 1)\n            .activation(Activation.IDENTITY)\n            .build(), \"maxpooling2d_5\")\n            .addLayer(\"globalpooling\", new GlobalPoolingLayer.Builder(PoolingType.AVG).build(), \"convolution2d_6\")\n            .addLayer(\"loss\", new LossLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).activation(Activation.SOFTMAX).build(), \"globalpooling\")\n            .setOutputs(\"loss\")\n\n        val conf = b.build()\n\n        val net = new ComputationGraph(conf)\n        net.init()\n\n        return net\n    }","user":"anonymous","dateUpdated":"2019-09-01T19:17:18+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"getNetwork: ()org.deeplearning4j.nn.graph.ComputationGraph\n"}]},"apps":[],"jobName":"paragraph_1567362495241_-735094554","id":"20190828-044805_1310907596","dateCreated":"2019-09-01T18:28:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:16197","dateFinished":"2019-09-01T19:17:18+0000","dateStarted":"2019-09-01T19:17:18+0000"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1567366168774_-1540754353","id":"20190901-192928_26111725","dateCreated":"2019-09-01T19:29:28+0000","status":"RUNNING","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17906","text":"import org.deeplearning4j.datasets.fetchers.DataSetType\n\nval trainIter = new TinyImageNetDataSetIterator(numEpochs, Array(224,224), DataSetType.TRAIN)\nval testIter = new TinyImageNetDataSetIterator(numEpochs, Array(224,224), DataSetType.TEST)","dateUpdated":"2019-09-01T19:33:05+0000","dateFinished":"2019-09-01T19:30:47+0000","dateStarted":"2019-09-01T19:33:05+0000","errorMessage":"","results":{"msg":[{"data":"","type":"TEXT"}]}},{"text":"val sparkNet = new SparkComputationGraph(sc, getNetwork, tm)\nsparkNet.setListeners(new PerformanceListener(10, true))\n\nval imageHeightWidth = 64;      //64x64 pixel input\nval imageChannels = 3;          //RGB\nval labelMaker = new ParentPathLabelGenerator();\nval rr = new ImageRecordReader(imageHeightWidth, imageHeightWidth, imageChannels, labelMaker);\nrr.setLabels(new TinyImageNetDataSetIterator(1).getLabels());\nval numClasses = TinyImageNetFetcher.NUM_LABELS;\nval loader = new RecordReaderFileBatchLoader(rr, minibatch, 1, numClasses);\nloader.setPreProcessor(new ImagePreProcessingScaler());   //Scale 0-255 valued pixels to 0-1 range\n\nDataSetIterator trainIter = new TinyImageNetDataSetIterator(batchSize, new int[]{224,224}, DataSetType.TRAIN);\n        DataSetIterator testIter = new TinyImageNetDataSetIterator(batchSize, new int[]{224,224}, DataSetType.TEST);","user":"anonymous","dateUpdated":"2019-09-01T19:29:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"sparkNet: org.deeplearning4j.spark.impl.graph.SparkComputationGraph = org.deeplearning4j.spark.impl.graph.SparkComputationGraph@c4fe892\nimageHeightWidth: Int = 64\nimageChannels: Int = 3\nlabelMaker: org.datavec.api.io.labels.ParentPathLabelGenerator = org.datavec.api.io.labels.ParentPathLabelGenerator@3983631f\nrr: org.datavec.image.recordreader.ImageRecordReader = org.datavec.image.recordreader.ImageRecordReader@56a68e2\nnumClasses: Int = 200\nloader: org.deeplearning4j.api.loader.impl.RecordReaderFileBatchLoader = org.deeplearning4j.api.loader.impl.RecordReaderFileBatchLoader@37169851\n<console>:66: error: not found: value dataPath\n       val trainPath = dataPath + \"/\" + \"train\";\n                       ^\n"}]},"apps":[],"jobName":"paragraph_1567362495242_1231386934","id":"20190813-014219_2027485131","dateCreated":"2019-09-01T18:28:15+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:16198","dateFinished":"2019-09-01T19:24:24+0000","dateStarted":"2019-09-01T19:24:21+0000"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1567365809289_-771780252","id":"20190901-192329_1514877885","dateCreated":"2019-09-01T19:23:29+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17760","text":"dataPath.endsWith(\"/\")","dateUpdated":"2019-09-01T19:23:33+0000","dateFinished":"2019-09-01T19:23:34+0000","dateStarted":"2019-09-01T19:23:34+0000","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:67: error: not found: value dataPath\n       dataPath.endsWith(\"/\")\n       ^\n"}]}},{"text":"import collection.JavaConverters._\nzooModel.setInputShape(Array(Array(3, 32, 32)))","user":"anonymous","dateUpdated":"2019-09-01T18:28:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import collection.JavaConverters._\n"}]},"apps":[],"jobName":"paragraph_1567362495242_1542186933","id":"20190828-024936_683229252","dateCreated":"2019-09-01T18:28:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:16199"},{"text":"val tm = new ParameterAveragingTrainingMaster.Builder(batchSizePerWorker)    //Each DataSet object: contains (by default) 32 examples\n  .workerPrefetchNumBatches(0)\n  .saveUpdater(true)\n  .averagingFrequency(5)                            //Do 5 minibatch fit operations per worker, then average and redistribute parameters\n  .batchSizePerWorker(batchSizePerWorker)     //Number of examples that each worker uses per fit operation\n  .build()\n  \nval sparkNet = new SparkDl4jMultiLayer(sc, zooModel.conf(), tm)","user":"anonymous","dateUpdated":"2019-09-01T18:28:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tm: org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster = ParameterAveragingTrainingMaster(saveUpdater=true, numWorkers=null, rddDataSetNumExamples=16, averagingFrequency=5, aggregationDepth=2, prefetchNumBatches=0, iterationCount=0, trainingHookList=null)\nsparkNet: org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer = org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer@4644f87a\n"}]},"apps":[],"jobName":"paragraph_1567362495243_1952025689","id":"20190819-011525_331240530","dateCreated":"2019-09-01T18:28:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:16200"},{"text":"val numEpochs = 2\nfor (i <- 0 to numEpochs) {\n  println(i)\n  val trained = sparkNet.fit(trainData)\n}","user":"anonymous","dateUpdated":"2019-09-01T18:28:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"msg":[{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1567362495243_88261935","id":"20190813-015330_1330142053","dateCreated":"2019-09-01T18:28:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:16201"},{"text":"val resultado = sparkNet.doEvaluation(testData, 64, new Evaluation(10))(0)","user":"anonymous","dateUpdated":"2019-09-01T18:28:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1567362495244_1740245076","id":"20190813-021401_2110373941","dateCreated":"2019-09-01T18:28:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:16202"},{"text":"println(resultado)","user":"anonymous","dateUpdated":"2019-09-01T18:28:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:101: error: not found: value resultado\n       println(resultado)\n               ^\n"}]},"apps":[],"jobName":"paragraph_1567362495244_-1921002194","id":"20190828-032002_1964617380","dateCreated":"2019-09-01T18:28:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:16203"},{"user":"anonymous","dateUpdated":"2019-09-01T18:28:15+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1567362495245_-910787899","id":"20190828-032119_912714771","dateCreated":"2019-09-01T18:28:15+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:16204"}],"name":"VGG16_Cifar10","id":"2EPHQXR57","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}