{"paragraphs":[{"text":"%spark.dep\nz.reset()\nz.load(\"org.nd4j:nd4j-native-platform:0.9.1\")\nz.load(\"org.deeplearning4j:deeplearning4j-core:0.9.1\")\nz.load(\"org.datavec:datavec-spark_2.11:0.9.1_spark_2\")\nz.load(\"org.deeplearning4j:dl4j-spark_2.11:0.9.1_spark_2\")","user":"anonymous","dateUpdated":"2019-08-13T01:38:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@4fef3335\n"}]},"apps":[],"jobName":"paragraph_1565658376214_-1544834750","id":"20190813-010616_2021083357","dateCreated":"2019-08-13T01:06:16+0000","dateStarted":"2019-08-13T01:38:58+0000","dateFinished":"2019-08-13T01:39:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9893"},{"text":"import scala.collection.JavaConversions._\n\nimport org.deeplearning4j.datasets.iterator._\nimport org.deeplearning4j.datasets.iterator.impl._\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.multilayer._\nimport org.deeplearning4j.nn.graph._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.inputs._\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.weights._\nimport org.deeplearning4j.optimize.listeners._\nimport org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\n\nimport org.nd4j.linalg.learning.config._ // for different updaters like Adam, Nesterovs, etc.\nimport org.nd4j.linalg.activations.Activation // defines different activation functions like RELU, SOFTMAX, etc.\nimport org.nd4j.linalg.lossfunctions.LossFunctions // mean squared error, multiclass cross entropy, etc.","user":"anonymous","dateUpdated":"2019-08-13T01:40:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.collection.JavaConversions._\nimport org.deeplearning4j.datasets.iterator._\nimport org.deeplearning4j.datasets.iterator.impl._\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.multilayer._\nimport org.deeplearning4j.nn.graph._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.inputs._\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.weights._\nimport org.deeplearning4j.optimize.listeners._\nimport org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.nd4j.linalg.learning.config._\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.lossfunctions.LossFunctions\n"}]},"apps":[],"jobName":"paragraph_1565658386630_-705096467","id":"20190813-010626_1430679682","dateCreated":"2019-08-13T01:06:26+0000","dateStarted":"2019-08-13T01:40:38+0000","dateFinished":"2019-08-13T01:40:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9894"},{"text":"import org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator\n\nval batchSize = 16 // how many examples to simultaneously train in the network\nval emnistSet = EmnistDataSetIterator.Set.BALANCED\nval emnistTrain = new EmnistDataSetIterator(emnistSet, batchSize, true)\nval emnistTest = new EmnistDataSetIterator(emnistSet, batchSize, false)","user":"anonymous","dateUpdated":"2019-08-13T01:51:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator\nbatchSize: Int = 16\nemnistSet: org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator.Set = BALANCED\nemnistTrain: org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator@63d12f56\nemnistTest: org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator@31aefe6a\n"}]},"apps":[],"jobName":"paragraph_1565660090061_1096898815","id":"20190813-013450_461185789","dateCreated":"2019-08-13T01:34:50+0000","dateStarted":"2019-08-13T01:51:42+0000","dateFinished":"2019-08-13T01:51:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9895"},{"text":"val outputNum = EmnistDataSetIterator.numLabels(emnistSet) // total output classes\nval rngSeed = 123 // integer for reproducability of a random number generator\nval numRows = 28 // number of \"pixel rows\" in an mnist digit\nval numColumns = 28\n\nval conf = new NeuralNetConfiguration.Builder()\n            .seed(rngSeed)\n            .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n            .updater(new Adam())\n            .l2(1e-4)\n            .list()\n            .layer(0, new DenseLayer.Builder()\n                .nIn(numRows * numColumns) // Number of input datapoints.\n                .nOut(1000) // Number of output datapoints.\n                .activation(Activation.RELU) // Activation function.\n                .weightInit(WeightInit.XAVIER) // Weight initialization.\n                .build())\n            .layer(1, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\n                .nIn(1000)\n                .nOut(outputNum)\n                .activation(Activation.SOFTMAX)\n                .weightInit(WeightInit.XAVIER)\n                .build())\n            .pretrain(false).backprop(true)\n            .build()","user":"anonymous","dateUpdated":"2019-08-13T01:52:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"outputNum: Int = 47\nrngSeed: Int = 123\nnumRows: Int = 28\nnumColumns: Int = 28\nconf: org.deeplearning4j.nn.conf.MultiLayerConfiguration =\n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"dense\" : {\n        \"activationFn\" : {\n          \"ReLU\" : { }\n        },\n        \"adamMeanDecay\" : 0.9,\n        \"adamVarDecay\" : 0.999,\n        \"biasInit\" : 0.0,\n        \"biasLearningRate\" : 0.1,\n        \"dist\" : null,\n        \"dropOut\" : 0.0,\n        \"epsilon\" : 1.0E-8,\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n        \"iupdater\" : {\n          \"@class\" : \"org.nd4j.linalg.learning.config.Adam\",\n          \"beta1\" : 0.9,\n          \"beta2\" : 0.999,\n          \"epsilon\" : 1.0E..."}]},"apps":[],"jobName":"paragraph_1565660539887_-1618610781","id":"20190813-014219_2027485131","dateCreated":"2019-08-13T01:42:19+0000","dateStarted":"2019-08-13T01:52:44+0000","dateFinished":"2019-08-13T01:53:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9896"},{"text":"// create the MLN\nval network = new MultiLayerNetwork(conf)\nnetwork.init()\n\n// pass a training listener that reports score every 10 iterations\nval eachIterations = 5\nnetwork.addListeners(new ScoreIterationListener(eachIterations))\n\n// fit a dataset for a single epoch\nnetwork.fit(emnistTrain)\n\n// fit for multiple epochs\nval numEpochs = 2\nnetwork.fit(new MultipleEpochsIterator(numEpochs, emnistTrain))","user":"anonymous","dateUpdated":"2019-08-13T01:53:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"network: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@28026800\neachIterations: Int = 5\nnumEpochs: Int = 2\n"}]},"apps":[],"jobName":"paragraph_1565661164607_2051580664","id":"20190813-015244_394327268","dateCreated":"2019-08-13T01:52:44+0000","dateStarted":"2019-08-13T01:53:30+0000","dateFinished":"2019-08-13T02:05:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9897"},{"text":"// evaluate basic performance\nval eval = network.evaluate(emnistTest)\neval.accuracy()\neval.precision()\neval.recall()\n\n// evaluate ROC and calculate the Area Under Curve\nval roc = network.evaluateROCMultiClass(emnistTest, 1)\nroc.calculateAverageAUC()\n\nval classIndex = 0\nroc.calculateAUC(classIndex)\n\n// optionally, you can print all stats from the evaluations\nprint(eval.stats())\nprint(roc.stats())","user":"anonymous","dateUpdated":"2019-08-13T02:10:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eval: org.deeplearning4j.eval.Evaluation =\n\nExamples labeled as 0 classified by model as b: 400 times\nExamples labeled as 1 classified by model as b: 400 times\nExamples labeled as 2 classified by model as b: 400 times\nExamples labeled as 3 classified by model as b: 400 times\nExamples labeled as 4 classified by model as b: 400 times\nExamples labeled as 5 classified by model as b: 400 times\nExamples labeled as 6 classified by model as b: 400 times\nExamples labeled as 7 classified by model as b: 400 times\nExamples labeled as 8 classified by model as b: 400 times\nExamples labeled as 9 classified by model as b: 400 times\nExamples labeled as A classified by model as b: 400 times\nExamples labeled as B classified by model as b: 400 times\nExamples labeled as C classified by model as b: 400 times...res24: Double = 0.02127659574468085\nres25: Double = 0.007092953151044437\nres26: Double = 0.02127659574468085\nroc: org.deeplearning4j.eval.ROCMultiClass = ROCMultiClass(thresholdSteps=1, rocRemoveRedundantPts=true, underlying=[ROC(thresholdSteps=1, countActualPositive=400, countActualNegative=18400, counts={0.0=ROC.CountsForThreshold(threshold=0.0, countTruePositive=400, countFalsePositive=18400), 1.0=ROC.CountsForThreshold(threshold=1.0, countTruePositive=0, countFalsePositive=0)}, auc=0.5, auprc=0.5106382978723404, isExact=false, exampleCount=18800, rocRemoveRedundantPts=true), ROC(thresholdSteps=1, countActualPositive=400, countActualNegative=18400, counts={0.0=ROC.CountsForThreshold(threshold=0.0, countTruePositive=400, countFalsePositive=18400), 1.0=ROC.CountsForThreshold(threshold=1.0, countTruePositive=0, countFalsePositive=0)}, auc=0.5, auprc=0.5106382978723404, isExact=false, exampleCo...res29: Double = 0.5\nclassIndex: Int = 0\nres31: Double = 0.5\n\nExamples labeled as 0 classified by model as b: 400 times\nExamples labeled as 1 classified by model as b: 400 times\nExamples labeled as 2 classified by model as b: 400 times\nExamples labeled as 3 classified by model as b: 400 times\nExamples labeled as 4 classified by model as b: 400 times\nExamples labeled as 5 classified by model as b: 400 times\nExamples labeled as 6 classified by model as b: 400 times\nExamples labeled as 7 classified by model as b: 400 times\nExamples labeled as 8 classified by model as b: 400 times\nExamples labeled as 9 classified by model as b: 400 times\nExamples labeled as A classified by model as b: 400 times\nExamples labeled as B classified by model as b: 400 times\nExamples labeled as C classified by model as b: 400 times\nExamples labeled as D classified by model as b: 400 times\nExamples labeled as E classified by model as b: 399 times\nExamples labeled as E classified by model as r: 1 times\nExamples labeled as F classified by model as b: 400 times\nExamples labeled as G classified by model as b: 400 times\nExamples labeled as H classified by model as b: 400 times\nExamples labeled as I classified by model as b: 400 times\nExamples labeled as J classified by model as b: 400 times\nExamples labeled as K classified by model as C: 1 times\nExamples labeled as K classified by model as b: 399 times\nExamples labeled as L classified by model as b: 400 times\nExamples labeled as M classified by model as b: 400 times\nExamples labeled as N classified by model as b: 400 times\nExamples labeled as O classified by model as b: 400 times\nExamples labeled as P classified by model as b: 400 times\nExamples labeled as Q classified by model as b: 400 times\nExamples labeled as R classified by model as b: 400 times\nExamples labeled as S classified by model as b: 400 times\nExamples labeled as T classified by model as b: 400 times\nExamples labeled as U classified by model as b: 400 times\nExamples labeled as V classified by model as b: 400 times\nExamples labeled as W classified by model as b: 400 times\nExamples labeled as X classified by model as b: 400 times\nExamples labeled as Y classified by model as b: 400 times\nExamples labeled as Z classified by model as b: 400 times\nExamples labeled as a classified by model as b: 400 times\nExamples labeled as b classified by model as b: 400 times\nExamples labeled as d classified by model as b: 400 times\nExamples labeled as e classified by model as b: 400 times\nExamples labeled as f classified by model as b: 400 times\nExamples labeled as g classified by model as b: 400 times\nExamples labeled as h classified by model as b: 400 times\nExamples labeled as n classified by model as b: 400 times\nExamples labeled as q classified by model as b: 400 times\nExamples labeled as r classified by model as b: 400 times\nExamples labeled as t classified by model as b: 400 times\n\nWarning: 44 classes were never predicted by the model and were excluded from average precision\nClasses excluded from average precision: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46]\n\n==========================Scores========================================\n # of classes:    47\n Accuracy:        0.0213\n Precision:       0.0071\t(44 classes excluded from average)\n Recall:          0.0213\n F1 Score:        0.0139\t(44 classes excluded from average)\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 47 classes)\n========================================================================Label               AUC         # Pos     # Neg     \n0                   0.5000      400       18400     \n1                   0.5000      400       18400     \n2                   0.5000      400       18400     \n3                   0.5000      400       18400     \n4                   0.5000      400       18400     \n5                   0.5000      400       18400     \n6                   0.5000      400       18400     \n7                   0.5000      400       18400     \n8                   0.5000      400       18400     \n9                   0.5000      400       18400     \n10                  0.5000      400       18400     \n11                  0.5000      400       18400     \n12                  0.5000      400       18400     \n13                  0.5000      400       18400     \n14                  0.5000      400       18400     \n15                  0.5000      400       18400     \n16                  0.5000      400       18400     \n17                  0.5000      400       18400     \n18                  0.5000      400       18400     \n19                  0.5000      400       18400     \n20                  0.5000      400       18400     \n21                  0.5000      400       18400     \n22                  0.5000      400       18400     \n23                  0.5000      400       18400     \n24                  0.5000      400       18400     \n25                  0.5000      400       18400     \n26                  0.5000      400       18400     \n27                  0.5000      400       18400     \n28                  0.5000      400       18400     \n29                  0.5000      400       18400     \n30                  0.5000      400       18400     \n31                  0.5000      400       18400     \n32                  0.5000      400       18400     \n33                  0.5000      400       18400     \n34                  0.5000      400       18400     \n35                  0.5000      400       18400     \n36                  0.5000      400       18400     \n37                  0.5000      400       18400     \n38                  0.5000      400       18400     \n39                  0.5000      400       18400     \n40                  0.5000      400       18400     \n41                  0.5000      400       18400     \n42                  0.5000      400       18400     \n43                  0.5000      400       18400     \n44                  0.5000      400       18400     \n45                  0.5000      400       18400     \n46                  0.5000      400       18400     Average AUC: 0.5000      "}]},"apps":[],"jobName":"paragraph_1565661210944_-1099250672","id":"20190813-015330_1330142053","dateCreated":"2019-08-13T01:53:30+0000","dateStarted":"2019-08-13T02:10:13+0000","dateFinished":"2019-08-13T02:10:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9898"},{"text":"val data = Array(1, 2, 3, 4, 5)\nval distData = sc.parallelize(data)","user":"anonymous","dateUpdated":"2019-08-13T02:13:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"data: Array[Int] = Array(1, 2, 3, 4, 5)\ndistData: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[0] at parallelize at <console>:71\n"}]},"apps":[],"jobName":"paragraph_1565661648378_1433174811","id":"20190813-020048_514556760","dateCreated":"2019-08-13T02:00:48+0000","dateStarted":"2019-08-13T02:13:45+0000","dateFinished":"2019-08-13T02:13:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9899"},{"text":"distData.count()","user":"anonymous","dateUpdated":"2019-08-13T02:14:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res36: Long = 5\n"}]},"apps":[],"jobName":"paragraph_1565662425956_-921782382","id":"20190813-021345_11287334","dateCreated":"2019-08-13T02:13:45+0000","dateStarted":"2019-08-13T02:14:01+0000","dateFinished":"2019-08-13T02:14:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9900"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1565662441873_1654911650","id":"20190813-021401_2110373941","dateCreated":"2019-08-13T02:14:01+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9901"}],"name":"ufrgs","id":"2EHUNPD66","angularObjects":{"2EMQQ3DX6:shared_process":[],"2EHZSSYUS:shared_process":[],"2EK3YX8R3:shared_process":[],"2EJEVQW3R:shared_process":[],"2EH28NVMD:shared_process":[],"2EJN5VJRQ:shared_process":[],"2EJW148VQ:shared_process":[],"2EK1MGQEG:shared_process":[],"2EKRX39FS:shared_process":[],"2EKMNY63R:shared_process":[],"2EHVDSMS9:shared_process":[],"2EKD827GT:shared_process":[],"2EM9C7PGB:shared_process":[],"2EKZ72CJP:shared_process":[],"2EHSEYXD7:shared_process":[],"2EJVP8NPH:shared_process":[],"2EJS2DMAD:shared_process":[],"2EH8D4GW1:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}