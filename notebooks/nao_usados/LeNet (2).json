{"paragraphs":[{"text":"%spark.dep\nz.reset()\nz.load(\"org.nd4j:nd4j-native-platform:0.9.1\")\nz.load(\"org.deeplearning4j:deeplearning4j-core:0.9.1\")\nz.load(\"org.datavec:datavec-spark_2.11:0.9.1_spark_2\")\nz.load(\"org.deeplearning4j:dl4j-spark_2.11:0.9.1_spark_2\")\nz.load(\"org.deeplearning4j:deeplearning4j-zoo:0.9.1\")","user":"anonymous","dateUpdated":"2019-08-19T01:55:24+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@3133ebe1\n"}]},"apps":[],"jobName":"paragraph_1566175934659_1187767495","id":"20190813-010616_2021083357","dateCreated":"2019-08-19T00:52:14+0000","dateStarted":"2019-08-19T01:55:24+0000","dateFinished":"2019-08-19T01:55:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1828"},{"text":"import scala.collection.JavaConversions._\n\nimport org.deeplearning4j.datasets.iterator._\nimport org.deeplearning4j.datasets.iterator.impl._\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.multilayer._\nimport org.deeplearning4j.nn.graph._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.inputs._\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.weights._\nimport org.deeplearning4j.spark.api.TrainingMaster\nimport org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer\nimport org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster\nimport org.deeplearning4j.optimize.listeners._\nimport org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.zoo.model.LeNet\n\nimport org.nd4j.linalg.learning.config._ // for different updaters like Adam, Nesterovs, etc.\nimport org.nd4j.linalg.activations.Activation // defines different activation functions like RELU, SOFTMAX, etc.\nimport org.nd4j.linalg.lossfunctions.LossFunctions // mean squared error, multiclass cross entropy, etc.","user":"anonymous","dateUpdated":"2019-08-19T01:55:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.collection.JavaConversions._\nimport org.deeplearning4j.datasets.iterator._\nimport org.deeplearning4j.datasets.iterator.impl._\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.multilayer._\nimport org.deeplearning4j.nn.graph._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.inputs._\nimport org.deeplearning4j.nn.conf.layers._\nimport org.deeplearning4j.nn.weights._\nimport org.deeplearning4j.spark.api.TrainingMaster\nimport org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer\nimport org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster\nimport org.deeplearning4j.optimize.listeners._\nimport org.deeplearning4j.datasets.datavec.RecordReaderMultiDataSetIterator\nimport org.deeplearning4j.eval.Evaluation\nimport org.deeplearning4j.zoo.model.LeNet\nimport org.nd4j.linalg.learning.config._\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.lossfunctions.LossFunctions\n"}]},"apps":[],"jobName":"paragraph_1566175934659_1187767495","id":"20190813-010626_1430679682","dateCreated":"2019-08-19T00:52:14+0000","dateStarted":"2019-08-19T01:55:51+0000","dateFinished":"2019-08-19T01:56:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1829"},{"text":"import org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator\n\nval batchSize = 16 // how many examples to simultaneously train in the network\nval emnistSet = EmnistDataSetIterator.Set.MNIST\nval emnistTrain = new EmnistDataSetIterator(emnistSet, batchSize, true)\nval emnistTest = new EmnistDataSetIterator(emnistSet, batchSize, false)","user":"anonymous","dateUpdated":"2019-08-19T02:03:44+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator\nbatchSize: Int = 16\nemnistSet: org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator.Set = MNIST\nemnistTrain: org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator@4ab2a4d9\nemnistTest: org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator = org.deeplearning4j.datasets.iterator.impl.EmnistDataSetIterator@7faf47ec\n"}]},"apps":[],"jobName":"paragraph_1566175934660_1185843750","id":"20190813-013450_461185789","dateCreated":"2019-08-19T00:52:14+0000","dateStarted":"2019-08-19T02:03:44+0000","dateFinished":"2019-08-19T02:03:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1830"},{"text":"val classesNum = EmnistDataSetIterator.numLabels(emnistSet) // total output classes\nval seed = 123 // integer for reproducability of a random number generator\nval numRows = 28 // number of \"pixel rows\" in an mnist digit\nval numColumns = 28\n\nval zooModel = new LeNet(classesNum, seed, 3)\n//Model net = zooModel.init();\n","user":"anonymous","dateUpdated":"2019-08-19T02:03:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"classesNum: Int = 10\nseed: Int = 123\nnumRows: Int = 28\nnumColumns: Int = 28\nzooModel: org.deeplearning4j.zoo.model.LeNet = org.deeplearning4j.zoo.model.LeNet@5192c303\n"}]},"apps":[],"jobName":"paragraph_1566175934660_1185843750","id":"20190813-014219_2027485131","dateCreated":"2019-08-19T00:52:14+0000","dateStarted":"2019-08-19T02:03:56+0000","dateFinished":"2019-08-19T02:03:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1831"},{"text":"//zooModel.init()\n//zooModel.conf()","user":"anonymous","dateUpdated":"2019-08-19T02:04:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1566177268956_1649381331","id":"20190819-011428_2087551091","dateCreated":"2019-08-19T01:14:28+0000","dateStarted":"2019-08-19T02:04:02+0000","dateFinished":"2019-08-19T02:04:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1832"},{"text":"val batchSizePerWorker = 16\n\nval tm = new ParameterAveragingTrainingMaster.Builder(batchSizePerWorker)    //Each DataSet object: contains (by default) 32 examples\n  .averagingFrequency(5)\n  .workerPrefetchNumBatches(2)            //Async prefetching: 2 examples per worker\n  .batchSizePerWorker(batchSizePerWorker)\n  .build()\n  \nval sparkNet = new SparkDl4jMultiLayer(sc, zooModel.conf(), tm)","user":"anonymous","dateUpdated":"2019-08-19T02:04:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"batchSizePerWorker: Int = 16\ntm: org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster = ParameterAveragingTrainingMaster(saveUpdater=false, numWorkers=null, rddDataSetNumExamples=16, averagingFrequency=5, aggregationDepth=2, prefetchNumBatches=2, iterationCount=0, trainingHookList=null)\njava.lang.OutOfMemoryError: Cannot allocate new FloatPointer(78432080): totalBytes = 1G, physicalBytes = 3G\n  at org.bytedeco.javacpp.FloatPointer.<init>(FloatPointer.java:76)\n  at org.nd4j.linalg.api.buffer.BaseDataBuffer.<init>(BaseDataBuffer.java:541)\n  at org.nd4j.linalg.api.buffer.FloatBuffer.<init>(FloatBuffer.java:61)\n  at org.nd4j.linalg.api.buffer.factory.DefaultDataBufferFactory.createFloat(DefaultDataBufferFactory.java:255)\n  at org.nd4j.linalg.factory.Nd4j.createBuffer(Nd4j.java:1468)\n  at org.nd4j.linalg.factory.Nd4j.createBuffer(Nd4j.java:1442)\n  at org.nd4j.linalg.api.ndarray.BaseNDArray.<init>(BaseNDArray.java:247)\n  at org.nd4j.linalg.cpu.nativecpu.NDArray.<init>(NDArray.java:109)\n  at org.nd4j.linalg.cpu.nativecpu.CpuNDArrayFactory.create(CpuNDArrayFactory.java:262)\n  at org.nd4j.linalg.factory.Nd4j.create(Nd4j.java:5014)\n  at org.nd4j.linalg.factory.Nd4j.create(Nd4j.java:4965)\n  at org.nd4j.linalg.factory.Nd4j.create(Nd4j.java:4093)\n  at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.init(MultiLayerNetwork.java:598)\n  at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.init(MultiLayerNetwork.java:539)\n  at org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer.initNetwork(SparkDl4jMultiLayer.java:128)\n  at org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer.<init>(SparkDl4jMultiLayer.java:100)\n  ... 70 elided\nCaused by: java.lang.OutOfMemoryError: Native allocator returned address == 0\n  at org.bytedeco.javacpp.FloatPointer.<init>(FloatPointer.java:70)\n  ... 85 more\n"}]},"apps":[],"jobName":"paragraph_1566177325760_146829607","id":"20190819-011525_331240530","dateCreated":"2019-08-19T01:15:25+0000","dateStarted":"2019-08-19T02:04:05+0000","dateFinished":"2019-08-19T02:04:07+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:1833"},{"text":"import scala.collection.mutable.ListBuffer\nimport org.nd4j.linalg.dataset.DataSet\nvar trainDataList = new ListBuffer[DataSet]()\nwhile (emnistTrain.hasNext()) {\n  trainDataList += emnistTrain.next()\n}","user":"anonymous","dateUpdated":"2019-08-19T01:57:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.collection.mutable.ListBuffer\nimport org.nd4j.linalg.dataset.DataSet\ntrainDataList: scala.collection.mutable.ListBuffer[org.nd4j.linalg.dataset.DataSet] = ListBuffer()\n"}]},"apps":[],"jobName":"paragraph_1566178260394_-696390029","id":"20190819-013100_1638248977","dateCreated":"2019-08-19T01:31:00+0000","dateStarted":"2019-08-19T01:57:10+0000","dateFinished":"2019-08-19T01:57:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1834"},{"text":"import scala.collection.mutable.ListBuffer\nimport org.nd4j.linalg.dataset.DataSet\nval testDataList = new ListBuffer[DataSet]()\nwhile (emnistTest.hasNext()) {\n  testDataList += emnistTest.next()\n}","user":"anonymous","dateUpdated":"2019-08-19T01:57:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.collection.mutable.ListBuffer\nimport org.nd4j.linalg.dataset.DataSet\ntestDataList: scala.collection.mutable.ListBuffer[org.nd4j.linalg.dataset.DataSet] = ListBuffer()\n"}]},"apps":[],"jobName":"paragraph_1566178265016_-1320822170","id":"20190819-013105_134088383","dateCreated":"2019-08-19T01:31:05+0000","dateStarted":"2019-08-19T01:57:30+0000","dateFinished":"2019-08-19T01:57:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1835"},{"text":"val trainData = sc.parallelize(trainDataList)\nval testData = sc.parallelize(testDataList)","user":"anonymous","dateUpdated":"2019-08-19T01:57:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainData: org.apache.spark.rdd.RDD[org.nd4j.linalg.dataset.DataSet] = ParallelCollectionRDD[0] at parallelize at <console>:78\ntestData: org.apache.spark.rdd.RDD[org.nd4j.linalg.dataset.DataSet] = ParallelCollectionRDD[1] at parallelize at <console>:78\n"}]},"apps":[],"jobName":"paragraph_1566178432678_-1068225509","id":"20190819-013352_381186300","dateCreated":"2019-08-19T01:33:52+0000","dateStarted":"2019-08-19T01:57:33+0000","dateFinished":"2019-08-19T01:57:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1836"},{"text":"val trained = sparkNet.fit(trainData)","user":"anonymous","dateUpdated":"2019-08-19T01:58:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.lang.OutOfMemoryError: Cannot allocate new FloatPointer(156901234): totalBytes = 1G, physicalBytes = 2G\n  at org.bytedeco.javacpp.FloatPointer.<init>(FloatPointer.java:76)\n  at org.nd4j.linalg.api.buffer.BaseDataBuffer.<init>(BaseDataBuffer.java:541)\n  at org.nd4j.linalg.api.buffer.FloatBuffer.<init>(FloatBuffer.java:61)\n  at org.nd4j.linalg.api.buffer.factory.DefaultDataBufferFactory.createFloat(DefaultDataBufferFactory.java:255)\n  at org.nd4j.linalg.factory.Nd4j.createBuffer(Nd4j.java:1468)\n  at org.nd4j.linalg.api.ndarray.BaseNDArray.<init>(BaseNDArray.java:260)\n  at org.nd4j.linalg.cpu.nativecpu.NDArray.<init>(NDArray.java:122)\n  at org.nd4j.linalg.cpu.nativecpu.CpuNDArrayFactory.createUninitialized(CpuNDArrayFactory.java:267)\n  at org.nd4j.linalg.factory.Nd4j.createUninitialized(Nd4j.java:5054)\n  at org.deeplearning4j.nn.updater.BaseMultiLayerUpdater.<init>(BaseMultiLayerUpdater.java:130)\n  at org.deeplearning4j.nn.updater.MultiLayerUpdater.<init>(MultiLayerUpdater.java:28)\n  at org.deeplearning4j.nn.updater.MultiLayerUpdater.<init>(MultiLayerUpdater.java:24)\n  at org.deeplearning4j.nn.updater.UpdaterCreator.getUpdater(UpdaterCreator.java:20)\n  at org.deeplearning4j.optimize.solvers.BaseOptimizer.getUpdater(BaseOptimizer.java:133)\n  at org.deeplearning4j.nn.multilayer.MultiLayerNetwork.getUpdater(MultiLayerNetwork.java:2749)\n  at org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster.getWorkerInstance(ParameterAveragingTrainingMaster.java:255)\n  at org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster.doIterationPaths(ParameterAveragingTrainingMaster.java:707)\n  at org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster.executeTrainingPathsHelper(ParameterAveragingTrainingMaster.java:432)\n  at org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster.executeTraining(ParameterAveragingTrainingMaster.java:317)\n  at org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer.fit(SparkDl4jMultiLayer.java:218)\n  at org.deeplearning4j.spark.impl.multilayer.SparkDl4jMultiLayer.fit(SparkDl4jMultiLayer.java:205)\n  ... 70 elided\nCaused by: java.lang.OutOfMemoryError: Native allocator returned address == 0\n  at org.bytedeco.javacpp.FloatPointer.<init>(FloatPointer.java:70)\n  ... 90 more\n"}]},"apps":[],"jobName":"paragraph_1566175934660_1185843750","id":"20190813-015330_1330142053","dateCreated":"2019-08-19T00:52:14+0000","dateStarted":"2019-08-19T01:58:25+0000","dateFinished":"2019-08-19T01:59:58+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:1837"},{"dateUpdated":"2019-08-19T00:52:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1566175934661_1185459001","id":"20190813-021401_2110373941","dateCreated":"2019-08-19T00:52:14+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1838"}],"name":"LeNet","id":"2EJ7X2Y9Q","angularObjects":{"2EMFZ4NFU:shared_process":[],"2EJXQ8ZPD:shared_process":[],"2EKXGPXCC:shared_process":[],"2EK15C8YB:shared_process":[],"2EKDEQJYT:shared_process":[],"2EHW7Z5YU:shared_process":[],"2EMCNW2G4:shared_process":[],"2EM84WC6S:shared_process":[],"2EMHH78B8:shared_process":[],"2ENG4M9F5:shared_process":[],"2EMU5MAJP:shared_process":[],"2EKU6CN44:shared_process":[],"2EHSDM652:shared_process":[],"2EK5AG5Q6:shared_process":[],"2EKS96AC1:shared_process":[],"2EJNR4GBG:shared_process":[],"2EJ76PS7V:shared_process":[],"2EM7PS6QM:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}